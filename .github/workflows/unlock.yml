# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on: [push]

jobs:
  unlock-app:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}         
    - run: cd unlock-app && yarn      
    - run: cd unlock-app && yarn test
      env:
        CI: true

  paywall:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}         
    - run: cd paywall && yarn      
    - run: cd paywall && yarn test
      env:
        CI: true
        
  wedlocks:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}         
    - run: cd wedlocks && yarn      
    - run: cd wedlocks && yarn test
      env:
        CI: true 

  newsletter:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}         
    - run: cd newsletter && yarn      
    - run: cd newsletter && yarn test
      env:
        CI: true
                 
  tickets:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}         
    - run: cd tickets && yarn      
    - run: cd tickets && yarn test
      env:
        CI: true          

  smart-contracts:
    runs-on: ubuntu-latest
    container: node:10.18-jessie
    services:
      ganache:
        image: trufflesuite/ganache-cli
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}         
    - run: cd smart-contracts && yarn      
    # - run: cd smart-contracts && yarn build
    # - run: cd smart-contracts && yarn test
      env:
        CI: true
        
  locksmith:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:10.18-jessie

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v2

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: cd locksmith && yarn

      - name: Run test
        # Runs a script that creates a PostgreSQL client, populates
        # the client with data, and retrieves data
        run: cd locksmith && yarn test
        # Environment variable used by the `client.js` script to create a new PostgreSQL client.
        env:
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: postgres
          DB_HOSTNAME: postgres
          DB_PASSWORD: postgres
          DB_USERNAME: postgres
          DB_NAME: postgres
          WEB3_PROVIDER_HOST: http://0.0.0.0:8545

          # The default PostgreSQL port
          POSTGRES_PORT: 5432